//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BatchRun.Data {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("BatchRunDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BatchRunDS : System.Data.DataSet {
        
        private ScriptsListDataTable tableScriptsList;
        
        private BatchDataTable tableBatch;
        
        private System.Data.DataRelation relationBatch_ScriptsList;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BatchRunDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BatchRunDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ScriptsList"] != null)) {
                    base.Tables.Add(new ScriptsListDataTable(ds.Tables["ScriptsList"]));
                }
                if ((ds.Tables["Batch"] != null)) {
                    base.Tables.Add(new BatchDataTable(ds.Tables["Batch"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScriptsListDataTable ScriptsList {
            get {
                return this.tableScriptsList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BatchDataTable Batch {
            get {
                return this.tableBatch;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            BatchRunDS cln = ((BatchRunDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ScriptsList"] != null)) {
                    base.Tables.Add(new ScriptsListDataTable(ds.Tables["ScriptsList"]));
                }
                if ((ds.Tables["Batch"] != null)) {
                    base.Tables.Add(new BatchDataTable(ds.Tables["Batch"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableScriptsList = ((ScriptsListDataTable)(base.Tables["ScriptsList"]));
            if ((initTable == true)) {
                if ((this.tableScriptsList != null)) {
                    this.tableScriptsList.InitVars();
                }
            }
            this.tableBatch = ((BatchDataTable)(base.Tables["Batch"]));
            if ((initTable == true)) {
                if ((this.tableBatch != null)) {
                    this.tableBatch.InitVars();
                }
            }
            this.relationBatch_ScriptsList = this.Relations["Batch_ScriptsList"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BatchRunDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BatchRunDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableScriptsList = new ScriptsListDataTable();
            base.Tables.Add(this.tableScriptsList);
            this.tableBatch = new BatchDataTable();
            base.Tables.Add(this.tableBatch);
            this.relationBatch_ScriptsList = new System.Data.DataRelation("Batch_ScriptsList", new System.Data.DataColumn[] {
                        this.tableBatch.BatchIdColumn}, new System.Data.DataColumn[] {
                        this.tableScriptsList.BatchIdColumn}, false);
            this.Relations.Add(this.relationBatch_ScriptsList);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScriptsList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBatch() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            BatchRunDS ds = new BatchRunDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ScriptsListRowChangeEventHandler(object sender, ScriptsListRowChangeEvent e);
        
        public delegate void BatchRowChangeEventHandler(object sender, BatchRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScriptsListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnScriptPath;
            
            private System.Data.DataColumn columnScriptName;
            
            private System.Data.DataColumn columnScriptExt;
            
            private System.Data.DataColumn columnWillExecute;
            
            private System.Data.DataColumn columnScriptId;
            
            private System.Data.DataColumn columnSortOrder;
            
            private System.Data.DataColumn columnBatchId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsListDataTable() {
                this.TableName = "ScriptsList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptsListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScriptsListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScriptPathColumn {
                get {
                    return this.columnScriptPath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScriptNameColumn {
                get {
                    return this.columnScriptName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScriptExtColumn {
                get {
                    return this.columnScriptExt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WillExecuteColumn {
                get {
                    return this.columnWillExecute;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScriptIdColumn {
                get {
                    return this.columnScriptId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SortOrderColumn {
                get {
                    return this.columnSortOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BatchIdColumn {
                get {
                    return this.columnBatchId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsListRow this[int index] {
                get {
                    return ((ScriptsListRow)(this.Rows[index]));
                }
            }
            
            public event ScriptsListRowChangeEventHandler ScriptsListRowChanging;
            
            public event ScriptsListRowChangeEventHandler ScriptsListRowChanged;
            
            public event ScriptsListRowChangeEventHandler ScriptsListRowDeleting;
            
            public event ScriptsListRowChangeEventHandler ScriptsListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScriptsListRow(ScriptsListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsListRow AddScriptsListRow(string ScriptPath, string ScriptName, string ScriptExt, bool WillExecute, int SortOrder, BatchRow parentBatchRowByBatch_ScriptsList) {
                ScriptsListRow rowScriptsListRow = ((ScriptsListRow)(this.NewRow()));
                rowScriptsListRow.ItemArray = new object[] {
                        ScriptPath,
                        ScriptName,
                        ScriptExt,
                        WillExecute,
                        null,
                        SortOrder,
                        parentBatchRowByBatch_ScriptsList[0]};
                this.Rows.Add(rowScriptsListRow);
                return rowScriptsListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsListRow FindByScriptId(int ScriptId) {
                return ((ScriptsListRow)(this.Rows.Find(new object[] {
                            ScriptId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ScriptsListDataTable cln = ((ScriptsListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ScriptsListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScriptPath = base.Columns["ScriptPath"];
                this.columnScriptName = base.Columns["ScriptName"];
                this.columnScriptExt = base.Columns["ScriptExt"];
                this.columnWillExecute = base.Columns["WillExecute"];
                this.columnScriptId = base.Columns["ScriptId"];
                this.columnSortOrder = base.Columns["SortOrder"];
                this.columnBatchId = base.Columns["BatchId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScriptPath = new System.Data.DataColumn("ScriptPath", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptPath);
                this.columnScriptName = new System.Data.DataColumn("ScriptName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptName);
                this.columnScriptExt = new System.Data.DataColumn("ScriptExt", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptExt);
                this.columnWillExecute = new System.Data.DataColumn("WillExecute", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWillExecute);
                this.columnScriptId = new System.Data.DataColumn("ScriptId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptId);
                this.columnSortOrder = new System.Data.DataColumn("SortOrder", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortOrder);
                this.columnBatchId = new System.Data.DataColumn("BatchId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnScriptId}, true));
                this.columnScriptPath.AllowDBNull = false;
                this.columnScriptName.AllowDBNull = false;
                this.columnScriptExt.AllowDBNull = false;
                this.columnWillExecute.AllowDBNull = false;
                this.columnScriptId.AutoIncrement = true;
                this.columnScriptId.AllowDBNull = false;
                this.columnScriptId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsListRow NewScriptsListRow() {
                return ((ScriptsListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ScriptsListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ScriptsListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScriptsListRowChanged != null)) {
                    this.ScriptsListRowChanged(this, new ScriptsListRowChangeEvent(((ScriptsListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScriptsListRowChanging != null)) {
                    this.ScriptsListRowChanging(this, new ScriptsListRowChangeEvent(((ScriptsListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScriptsListRowDeleted != null)) {
                    this.ScriptsListRowDeleted(this, new ScriptsListRowChangeEvent(((ScriptsListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScriptsListRowDeleting != null)) {
                    this.ScriptsListRowDeleting(this, new ScriptsListRowChangeEvent(((ScriptsListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScriptsListRow(ScriptsListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BatchRunDS ds = new BatchRunDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScriptsListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BatchDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBatchId;
            
            private System.Data.DataColumn columnConnString;
            
            private System.Data.DataColumn columnScriptsDirectory;
            
            private System.Data.DataColumn columnBatchName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatchDataTable() {
                this.TableName = "Batch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BatchDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BatchDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BatchIdColumn {
                get {
                    return this.columnBatchId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConnStringColumn {
                get {
                    return this.columnConnString;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ScriptsDirectoryColumn {
                get {
                    return this.columnScriptsDirectory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BatchNameColumn {
                get {
                    return this.columnBatchName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatchRow this[int index] {
                get {
                    return ((BatchRow)(this.Rows[index]));
                }
            }
            
            public event BatchRowChangeEventHandler BatchRowChanging;
            
            public event BatchRowChangeEventHandler BatchRowChanged;
            
            public event BatchRowChangeEventHandler BatchRowDeleting;
            
            public event BatchRowChangeEventHandler BatchRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBatchRow(BatchRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatchRow AddBatchRow(string ConnString, string ScriptsDirectory, string BatchName) {
                BatchRow rowBatchRow = ((BatchRow)(this.NewRow()));
                rowBatchRow.ItemArray = new object[] {
                        null,
                        ConnString,
                        ScriptsDirectory,
                        BatchName};
                this.Rows.Add(rowBatchRow);
                return rowBatchRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatchRow FindByBatchId(int BatchId) {
                return ((BatchRow)(this.Rows.Find(new object[] {
                            BatchId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BatchDataTable cln = ((BatchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BatchDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBatchId = base.Columns["BatchId"];
                this.columnConnString = base.Columns["ConnString"];
                this.columnScriptsDirectory = base.Columns["ScriptsDirectory"];
                this.columnBatchName = base.Columns["BatchName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBatchId = new System.Data.DataColumn("BatchId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchId);
                this.columnConnString = new System.Data.DataColumn("ConnString", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnString);
                this.columnScriptsDirectory = new System.Data.DataColumn("ScriptsDirectory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptsDirectory);
                this.columnBatchName = new System.Data.DataColumn("BatchName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnBatchId}, true));
                this.columnBatchId.AutoIncrement = true;
                this.columnBatchId.AutoIncrementSeed = 1000;
                this.columnBatchId.AllowDBNull = false;
                this.columnBatchId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatchRow NewBatchRow() {
                return ((BatchRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BatchRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BatchRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BatchRowChanged != null)) {
                    this.BatchRowChanged(this, new BatchRowChangeEvent(((BatchRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BatchRowChanging != null)) {
                    this.BatchRowChanging(this, new BatchRowChangeEvent(((BatchRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BatchRowDeleted != null)) {
                    this.BatchRowDeleted(this, new BatchRowChangeEvent(((BatchRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BatchRowDeleting != null)) {
                    this.BatchRowDeleting(this, new BatchRowChangeEvent(((BatchRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBatchRow(BatchRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BatchRunDS ds = new BatchRunDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BatchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScriptsListRow : System.Data.DataRow {
            
            private ScriptsListDataTable tableScriptsList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptsListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScriptsList = ((ScriptsListDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScriptPath {
                get {
                    return ((string)(this[this.tableScriptsList.ScriptPathColumn]));
                }
                set {
                    this[this.tableScriptsList.ScriptPathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScriptName {
                get {
                    return ((string)(this[this.tableScriptsList.ScriptNameColumn]));
                }
                set {
                    this[this.tableScriptsList.ScriptNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScriptExt {
                get {
                    return ((string)(this[this.tableScriptsList.ScriptExtColumn]));
                }
                set {
                    this[this.tableScriptsList.ScriptExtColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool WillExecute {
                get {
                    return ((bool)(this[this.tableScriptsList.WillExecuteColumn]));
                }
                set {
                    this[this.tableScriptsList.WillExecuteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptId {
                get {
                    return ((int)(this[this.tableScriptsList.ScriptIdColumn]));
                }
                set {
                    this[this.tableScriptsList.ScriptIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortOrder {
                get {
                    try {
                        return ((int)(this[this.tableScriptsList.SortOrderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SortOrder\' in table \'ScriptsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptsList.SortOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BatchId {
                get {
                    try {
                        return ((int)(this[this.tableScriptsList.BatchIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BatchId\' in table \'ScriptsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptsList.BatchIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatchRow BatchRow {
                get {
                    return ((BatchRow)(this.GetParentRow(this.Table.ParentRelations["Batch_ScriptsList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Batch_ScriptsList"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortOrderNull() {
                return this.IsNull(this.tableScriptsList.SortOrderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortOrderNull() {
                this[this.tableScriptsList.SortOrderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchIdNull() {
                return this.IsNull(this.tableScriptsList.BatchIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchIdNull() {
                this[this.tableScriptsList.BatchIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BatchRow : System.Data.DataRow {
            
            private BatchDataTable tableBatch;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BatchRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBatch = ((BatchDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BatchId {
                get {
                    return ((int)(this[this.tableBatch.BatchIdColumn]));
                }
                set {
                    this[this.tableBatch.BatchIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConnString {
                get {
                    try {
                        return ((string)(this[this.tableBatch.ConnStringColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConnString\' in table \'Batch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBatch.ConnStringColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScriptsDirectory {
                get {
                    try {
                        return ((string)(this[this.tableBatch.ScriptsDirectoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ScriptsDirectory\' in table \'Batch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBatch.ScriptsDirectoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchName {
                get {
                    try {
                        return ((string)(this[this.tableBatch.BatchNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BatchName\' in table \'Batch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBatch.BatchNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConnStringNull() {
                return this.IsNull(this.tableBatch.ConnStringColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConnStringNull() {
                this[this.tableBatch.ConnStringColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScriptsDirectoryNull() {
                return this.IsNull(this.tableBatch.ScriptsDirectoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScriptsDirectoryNull() {
                this[this.tableBatch.ScriptsDirectoryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchNameNull() {
                return this.IsNull(this.tableBatch.BatchNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchNameNull() {
                this[this.tableBatch.BatchNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsListRow[] GetScriptsListRows() {
                return ((ScriptsListRow[])(base.GetChildRows(this.Table.ChildRelations["Batch_ScriptsList"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScriptsListRowChangeEvent : System.EventArgs {
            
            private ScriptsListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsListRowChangeEvent(ScriptsListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BatchRowChangeEvent : System.EventArgs {
            
            private BatchRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatchRowChangeEvent(BatchRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591